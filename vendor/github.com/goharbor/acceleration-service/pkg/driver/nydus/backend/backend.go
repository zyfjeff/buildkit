// Copyright Project Harbor Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package backend

import (
	"context"
	"fmt"
)

const (
	BackendTypeOSS = "oss"
)

// Backend uploads blobs generated by nydus-image builder to a backend storage such as:
// - oss: A object storage backend, which uses its SDK to upload blob file.
type Backend interface {
	// Push pushes specified blob file to remote storage backend.
	Push(ctx context.Context, blobPath string) error
	// Check checks whether a blob exists in remote storage backend.
	Check(blobID string) (bool, error)
	// Type returns backend type name.
	Type() string
}

// Nydus driver majorly works for registry backend, which means blob is stored in
// registry as per OCI distribution specification. But nydus can also make OSS or
// other storage services as backend storage. Pass config as byte slice here because
// we haven't find a way to represent all backend config at the same time.
func NewBackend(_type string, config []byte) (Backend, error) {
	switch _type {
	case BackendTypeOSS:
		return newOSSBackend(config)
	case BackendTypeLocalFS:
		return newLocalFSBackend(config)
	default:
		return nil, fmt.Errorf("unsupported backend type %s", _type)
	}
}
